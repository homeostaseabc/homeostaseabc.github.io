System.register(["./chunk-vendor.js","./chunk-frameworks.js"],(function(){"use strict";var e;return{setters:[function(){},function(t){e=t.b}],execute:function(){const t="insights-query-telemetry",r={bubbles:!0,cancelable:!0};class InsightsQueryElement extends HTMLElement{connectedCallback(){this.executeQuery()}get query(){let e=this.getAttribute("query");if(e)return e;const t=this.getAttribute("query-container-id");if(t){const r=document.getElementById(t);r&&(e=r instanceof HTMLInputElement?r.value:r.textContent)}return e}set query(e){e?this.setAttribute("query",e):this.removeAttribute("query")}get apiUrl(){return this.getAttribute("api-url")}set apiUrl(e){e?this.setAttribute("api-url",e):this.removeAttribute("api-url")}get authUrl(){return this.getAttribute("auth-url")}set authUrl(e){e?this.setAttribute("auth-url",e):this.removeAttribute("auth-url")}async executeQuery(){const{query:e,render:s}=this.parseQuery(),n=this.apiUrl;if(!n||!e||!s)return;const{token:i,scope:o}=await this.fetchTokenAndScope();if(i&&o)try{const a=await fetch(n,{method:"POST",body:JSON.stringify({query:e}),headers:{Authorization:i,"X-Auth-Scope":o,"Content-Type":"application/json"}});if(200!==a.status)throw new Error("Insights API returned status code: "+a.status);const c=await a.json(),{data:u,errors:h}=c;if(!u||!h)throw this.innerHTML="Invalid response format",new Error("Either no data is returned or data response has changed");if(h&&h.hasErrors)throw new Error("Insights API Error: "+h.errorMessage);const l=this.formatData(u);if(!["series-table","line-chart","stacked-area-chart"].includes(s))throw new Error("Query attribute contains unknown render type: "+s);this.innerHTML=`<${s} series="${encodeURI(JSON.stringify(l))}"></${s}>`,this.dispatchEvent(new CustomEvent(t,Object.assign(Object.assign({},r),{detail:{incrementKey:"execute-success"}})))}catch(a){throw this.dispatchEvent(new CustomEvent(t,Object.assign(Object.assign({},r),{detail:{incrementKey:"execute-error"}}))),new InsightsDataFetchError(a.message)}}async fetchTokenAndScope(){const e=this.authUrl;if(!e)return{token:null,scope:null};try{const t=await fetch(e,{headers:{Accept:"application/json"}}),{token:r,scope:s}=await t.json();return{token:r,scope:s}}catch(s){throw this.dispatchEvent(new CustomEvent(t,Object.assign(Object.assign({},r),{detail:{incrementKey:"token-fetch-error"}}))),new InsightsTokenFetchError(s.message)}}formatData(e){return[e.columns.map((e=>e.name)),...e.rows]}parseQuery(){const e=this.query;if(!e)return{query:null,render:null};const t=e.match(/--\s*render\s+(?<render>[^\s]+)/i);return{query:e,render:t&&void 0!==t.groups?t.groups.render:"series-table"}}}class InsightsTokenFetchError extends Error{constructor(e){super(e),this.name="InsightsTokenFetchError"}}class InsightsDataFetchError extends Error{constructor(e){super(e),this.name="InsightsDataFetchError"}}window.customElements.get("insights-query")||(window.InsightsQueryElement=InsightsQueryElement,window.InsightsTokenFetchError=InsightsTokenFetchError,window.InsightsDataFetchError=InsightsDataFetchError,window.customElements.define("insights-query",InsightsQueryElement)),window.addEventListener("insights-query-telemetry",(t=>{const r={};let s=t.detail.incrementKey;if(s){s="INSIGHTS_QUERY_"+s.replace(/-/g,"_").toUpperCase();const e=s;e&&(r.incrementKey=e)}Object.keys(r).length>0&&e(r)}))}}}));
//# sourceMappingURL=chunk-insights-query-2b081f66.js.map
